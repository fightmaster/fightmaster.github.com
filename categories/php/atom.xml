<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Fightmaster's blog]]></title>
  <link href="http://fightmaster.github.io//categories/php/atom.xml" rel="self"/>
  <link href="http://fightmaster.github.io//"/>
  <updated>2014-09-08T23:15:35+04:00</updated>
  <id>http://fightmaster.github.io//</id>
  <author>
    <name><![CDATA[{"name"=>"fightmaster", "url"=>"https://twitter.com/old_fightmaster"}]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Рекомендации по php]]></title>
    <link href="http://fightmaster.github.io//blog/2014/09/04/recommendations-for-junior-php-developer.html"/>
    <updated>2014-09-04T21:00:00+04:00</updated>
    <id>http://fightmaster.github.io//blog/2014/09/04/recommendations-for-junior-php-developer</id>
    <content type="html"><![CDATA[<p>Вначале 2014 года я делал подборку рекомендаций по пхп. Наконец-то она <a href="http://fightmaster.github.com/recommendations/for-junior-php-developer.html">опубликована</a>.
Будет пополняться и изменяться со временем.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Чистый код. Boolean attribute]]></title>
    <link href="http://fightmaster.github.io//blog/2014/02/02/clean-code-boolean-attribute.html"/>
    <updated>2014-02-02T11:43:00+04:00</updated>
    <id>http://fightmaster.github.io//blog/2014/02/02/clean-code-boolean-attribute</id>
    <content type="html"><![CDATA[<p>Прошло два месяца с момента публикации последнего поста. Все настолько сильно перевернулось в моих рабочих буднях, что никак не войду в нужный ритм. Прошу извинить.</p>

<p>Но сегодня пойдет речь не об этом. На работе споткнулся на два интересных момента, а я обещал вам писать о своих приключениях. Попробую рассказать об одном из них.</p>

<!-- more -->

<h3>Boolean Attribute</h3>

<p>На мой взгляд, <code>Boolean Attribute</code> особенный итем/тип/термин в ООП. Кажется, что он намного проще <code>Exception</code>, подумаешь, всего лишь два возможных значения: <code>true</code> и <code>false</code>.
Но то ли я книжек в своей жизни уже перечитал, то ли опыт рефакторинга легаси проекта сказывается.
Я стал замечать у себя приступы ненависти, самоуничтожения при виде, как люди могут работать с такими атрибутами.</p>

<h4>Пример номер 1</h4>

<p>В каком-то контроллере какого-то проекта кто-то решил изменить статус.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$vacancy</span><span class="o">-&gt;</span><span class="na">getStatus</span><span class="p">())</span> <span class="p">{</span>
    <span class="nv">$status</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nv">$status</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$vacancy</span><span class="o">-&gt;</span><span class="na">setStatus</span><span class="p">(</span><span class="nv">$status</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Сколько претензий у вас к этому коду? Лично я затрудняюсь определить для себя, с какой стороны этот код обругать.
По-моему, автор сам себя запутал. Вообще, это глобальная проблема программиста, что он не знает чего хочет и пишет код.
Милый друг, остановись и подумай, прекрати смотреть и копипастить.</p>

<h4>Пример номер два</h4>

<p>Бытовой пример, есть некий класс с атрибутом. Если человек когда-нибудь слышал про <code>is*</code>, то он обязательно напишет слудующее.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">User</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$isActivated</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$enabled</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setIsActivated</span><span class="p">(</span><span class="nv">$isActivated</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isActivated</span> <span class="o">=</span> <span class="nv">$isActivated</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getIsActivated</span><span class="p">(</span><span class="nv">$isActivated</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">isActivated</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/*</span>
<span class="cm">    public function isIsActivated($isActivated)</span>
<span class="cm">    {</span>
<span class="cm">        return $this-&gt;isActivated;</span>
<span class="cm">    }</span>

<span class="cm">    public function isActivated($isActivated)</span>
<span class="cm">    {</span>
<span class="cm">        return $this-&gt;isActivated;</span>
<span class="cm">    }</span>
<span class="cm">    */</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setEnabled</span><span class="p">(</span><span class="nv">$enabled</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enabled</span> <span class="o">=</span> <span class="nv">$enabled</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getEnabled</span><span class="p">(</span><span class="nv">$enabled</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enabled</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="cm">/*</span>
<span class="cm">    public function isEnabled($enabled)</span>
<span class="cm">    {</span>
<span class="cm">        return $this-&gt;enabled;</span>
<span class="cm">    }</span>
<span class="cm">    */</span>
<span class="p">}</span>
</code></pre></div>
<p>Вообще всевозможных вариаций трудно представить, в зависимости от конекста они вызывают разное &quot;фи&quot;.</p>

<h4>Это же php</h4>

<p>Этот параграф специально для тех, кто любит поржать над <code>php</code>. Как вы знаете и понимаете, создав <code>setEnabled</code>,
вы можете вызвать <code>$user-&gt;setEnabled(&#39;Ha-ha&#39;); $user-&gt;setEnabled(1); $user-&gt;setEnabled(0);</code>. Немного неприятно.</p>

<h4>Скрытые проблемы</h4>

<p>На самом деле проблема лежит не в самом классе, а там где его используют. Программисты порой создают булевые атрибуты в качестве индикаторов чего-то.
И зачастую вызов стандартных <code>set*, get*</code> превращает код в какую-то паутину. Вы не сразу вспоминаете или понимаете, а что на самом деле здесь происходит.
Это не является какой-то причиной появления гавнокода, но это один из шагов к нему. Трудно превести конкретный пример, искать/описывать лень, но если представить...</p>

<p>Если мы завели какой-то флаг, значит он для чего-то нужен. Скорее всего, это будет какой-то <code>if</code>, а возможно и не один.
Соответственно нам не нужен в большинстве случаев <code>get*</code>.
Самое худшее, если этот флаг влияет на поведение другого атрибута этого объекта.
Вызов казалось бы обычного <code>setDeleted</code> может привести к невалидности соседнего атрибута.
А пихать дополнительную логику в этот сеттер - еще хуже.</p>

<h4>Лекарство, но не пуля</h4>

<p>Лично я предпочитаю следующие правила. Атрибуты делать причастиями: <code>enabled</code>, <code>deleted</code>, <code>activated</code>.
Вместо <code>get*</code> использовать <code>is*</code>: <code>isEnabled</code>, <code>isDeleted</code>, <code>isActivated</code>.
Вместо <code>set*</code> создавать методы-глаголы действия: <code>enable</code>, <code>disable</code>, <code>delete</code>, <code>restore</code>, <code>activate</code>, <code>deactivate</code>.</p>

<p>В случаях, когда все-таки ваш фреймворк требует <code>set*</code> метод, использовать что-то вроде этого:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">enable</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enabled</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">disable</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enabled</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">function</span> <span class="nf">setEnabled</span><span class="p">(</span><span class="nv">$enabled</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$enabled</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enable</span><span class="p">();</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">disable</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<h4>Проблемы с наименованием</h4>

<p>В текущем проекте несколько раз сталкивались с слишком замудренными атрибутами, к которым хороший глагол сразу не подберешь.
Мне кажется тут две проблемы: похой скилл подбора имен и сложная логика, пора начать рефакторинг.</p>

<p>Всегда можно однозначно дать определение состояния, в котором находится объект при данном значении атрибута.
Соответсвенно есть и название переходов из одного состояния в другое.</p>

<p>Если же состояние определяется сразу несколькими значениями, его формулировка занимает два-три предложения, навряд ли предложенная схема вам подойдет и поможет.
Скорее всего, она запутает код еще больше. Лучше всего задуматься о пересмотре этого куска кода, попробовать вынести логику в отдельный resolver.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Все дело в том, что так бывает...]]></title>
    <link href="http://fightmaster.github.io//blog/2013/10/17/the-whole-point-is-that-it-happens.html"/>
    <updated>2013-10-17T23:00:00+04:00</updated>
    <id>http://fightmaster.github.io//blog/2013/10/17/the-whole-point-is-that-it-happens</id>
    <content type="html"><![CDATA[<p>Именно так начинается одно из моих любимых стихотворений. Я собирался сегодня прийти домой и пописать код, но внезапно мне пришла в голову мораль одной басни, сюжет которой случился днем. Рекомендую уделить немного времени, хотя бы потому что это случалось с вами.</p>

<!-- more -->

<p>В статье про <a href="http://fightmaster.github.io/blog/2013/09/25/code-review.html">код ревью</a> был &quot;запрос&quot; на практическую сторону. Но руки не доходят написать что-то, да и сделать это достаточно сложно, по крайней мере в том виде, в котором я вижу. Скорее всего, она появится из таких маленьких статей, как эта.</p>

<h3>Кусочек сыра</h3>

<p>Сегодня попался на глаза вот такой кусочек кода.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="c1">//code</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">Utilities</span><span class="o">::</span><span class="na">arrayContains</span><span class="p">(</span><span class="nv">$array1</span><span class="p">,</span> <span class="nv">$array2</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//code</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Думаю что-то не так. Создают функцию в классе <code>Utilities</code> только тогда, когда не могут определить ее принадлежность. Что уже странно. Во-вторых, ну название. Вроде бы и понятно все, с другой стороны, не внушает какого-то доверия.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @param array $array1</span>
<span class="sd"> * @param array $array2</span>
<span class="sd"> * @return boolean</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">arrayContains</span><span class="p">(</span><span class="k">array</span> <span class="nv">$array1</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$array2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$array1</span> <span class="k">as</span> <span class="nv">$value1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">in_array</span><span class="p">(</span><span class="nv">$value1</span><span class="p">,</span> <span class="nv">$array2</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Действительно, несколько раз пробегаю глазами, так как боюсь упустить что-то, заставляя себя поверить в увиденное. Аккуратно оставляю предложение заменить содержание на <code>&lt;?php empty(array_diff($array1, $array2));?&gt;</code>, переименовать или удалить метод.</p>

<p>В итоге вечером получаем...</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @param array $array1</span>
<span class="sd"> * @param array $array2</span>
<span class="sd"> * @return boolean</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">isArrayDiff</span><span class="p">(</span><span class="k">array</span> <span class="nv">$array1</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$array2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$diff</span> <span class="o">=</span> <span class="nb">array_diff</span><span class="p">(</span><span class="nv">$array1</span><span class="p">,</span> <span class="nv">$array2</span><span class="p">);</span>

    <span class="k">return</span> <span class="k">empty</span><span class="p">(</span><span class="nv">$diff</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<h3>Про лису</h3>

<p>Хитрый лис не скажет вороне: &quot;Дай сыр, птица&quot;. Во-первых, она может не дать его. Во-вторых, навряд ли это чему-то научит, басня-то не получится и морали не будет. Поэтому идеальный вариант для ревью - это подача чего угодно в наилучшем виде для автора кода. В более сложных случаях я и свой вариант содержания не предлагаю, так как его у меня просто нет. Просто прошу еще раз подумать, в сложных ситуациях спасает парное программирование. При этом не надо выступать в роли оратора или диктатора. Если вы хотите думать за всех, пишите проект один тогда. Не могу сказать, что у меня всегда получается быть хитропопой лисой, но я стараюсь.</p>

<h3>Про чистый код и ворону</h3>

<p>Я думаю, что знаю на 99 процентов причину появления такого метода. Конечно, человек уже наелся определенного куска проекта. Метод вызывается в очень неприятном месте с кучей условных конструкций, хотелось как-то лучше разгрести. Скорее всего, в голову не пришла функция <code>array_diff</code>, и вынос <code>foreach</code> в отдельный метод - правильный выбор.</p>

<p>Но сам урок начался позже. Методы из двух строчек имеют место быть, все дело в названии. В последнем варианте мы получили обертку над стандартной функцией. В данном контексте она бессмысленна. Если мы захотим реализовать работу со стеком в ООП стиле и обернуть <code>array_pop</code> и <code>array_push</code> в класс и методы, то у нас будет цель и причина всего этого. Здесь цель не прослеживается.</p>

<p>Так что же делать в данном случае? Я бы подумал над куском кода, где это вызывается. Возможно, существует определение этой операции в целом. Ведь массивы что-то содержат, у них есть нормальные имена (в статье они преднамеренно переведены в <code>array1</code> и <code>array2</code>).</p>

<p>Например, если бы <code>array1</code> содержал права пользователя, а <code>array2</code> все необходимые права на просмотр страницы. Тогда, на мой скромный взгляд, метод имеет место быть на 101 процент, с каким-нибудь именем <code>isAllow*</code>.</p>

<p>Если мы не можем как-то определить и выделить по смыслу эти строчки, то и выносить их, скорее всего, нет смысла.</p>

<h3>Мораль басни</h3>

<p>Я думаю, стервятники и любители поржать даже не зайдут в этот скромный блог. В чем же я увидел &quot;мораль&quot; и почему такое название статьи? </p>

<p>Вы что-то прочитали, у вас куча идей и желание все перехерачить. А что-то идеальное лежит почему-то всегда на &quot;горном перевале&quot;. Так бывает, что на эмоциях мы проскакиваем его. Прочитали о паттернах - давай плодить из plain php кучу классов, выстраивать архитектуру, которая в итоге ничуть не понятнее. Прочитали дядюшку Боба - давай все дробить без остановки. Прочитали про agile - давай ломать работу проекта. Прочитали статью - давай сразу внедрять.</p>

<p>Я сам постоянно допускаю подобные ошибки, но при этом думаю, что это правильно. Продолжая горную тему: это лучше, чем сидеть перед перевалом всю жизнь, не совершая каких-то дерзких попыток покорения вершин, или вообще спуститься в долину со словами: &quot;Да ну нафиг эти горы&quot;. С приобретением опыта наши просчеты уменьшаются, а какими путниками мы станем, зависит только от нас.</p>

<p>Статью завершу словами: &quot;Лучше гор могут быть только горы, на которых никто не бывал&quot;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unit Tests. Data provider без головной боли]]></title>
    <link href="http://fightmaster.github.io//blog/2013/10/05/unit-tests-data-provider-without-a-headache.html"/>
    <updated>2013-10-05T01:00:00+04:00</updated>
    <id>http://fightmaster.github.io//blog/2013/10/05/unit-tests-data-provider-without-a-headache</id>
    <content type="html"><![CDATA[<p>Недавно текущий проект перевалил за 1500 юнит тестов. Захотелось подвести какой-то итог. И сегодня не будет какого-то рецепта: &quot;А делайте так - получите счастье&quot;. Посмотрим на примерах, как можно сделать что-то иначе. Внимание, очень много странных букв под php синтаксисом.</p>

<!-- more -->

<p>Мы с вами не на пробежке, разогреваться нам не надо, начнем сразу с кода. Примеры вымышленные, и я буду использовать аббревиатуру uut (Unit Under Test).</p>

<h3>isPositiveNumber($number)</h3>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">isPositiveNumber</span><span class="p">(</span><span class="nv">$number</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="nv">$number</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Тест мог бы выглядеть так:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">isPositiveNumber</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">isPositiveNumber</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>

    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">isPositiveNumber</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertFalse</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>

    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">isPositiveNumber</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertFalse</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Или так:</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">isPositiveNumberTrueScenario</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">isPositiveNumber</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertTrue</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">isPositiveNumberFalseScenario</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">isPositiveNumber</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertFalse</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>

    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">isPositiveNumber</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertFalse</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Мы пишем и пишем так тесты, пока кто-то не прочитает официальную документацию и не узнает, а что такое Data Providers: <a href="http://phpunit.de/manual/3.7/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers">phpunit.de</a>. Чаще всего нам необходимо протестировать метод с разными входными данными и проверить результат. Вот для избежания дублирования тестов и придумали эти провайдеры.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> * @dataProvider isPositiveNumberProvider</span>
<span class="sd"> *</span>
<span class="sd"> * @param integer $inputData</span>
<span class="sd"> * @param boolean $expectedResult</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">isPositiveNumber</span><span class="p">(</span><span class="nv">$inputData</span><span class="p">,</span> <span class="nv">$expectedResult</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">isPositiveNumber</span><span class="p">(</span><span class="nv">$inputData</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedResult</span><span class="p">,</span> <span class="nv">$result</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @return array</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">isPositiveNumberProvider</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
        <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">true</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">false</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Кажется мы нашли решение для всего и плодим тесты одни за другим...</p>

<h3>Простота - залог успеха</h3>

<p>Написав первую главу, я понял, что не могу придумать адекватный пример для второй. А по ощущениям, я большую часть жизни так писал. Несколько дней искал объяснение этому факту. Пришел к выводу, что наш код со временем стал чище, и такие тесты практически вымерли. </p>

<p>Отступление... В день выпуска статьи у меня был небольшой митинг с коллегой, который завершился словами: &quot;Если разбить метод на три, как я предложил, то и с тестированием проблем не будет&quot;. Не могу утверждать, что мои слова действительно помогут, но они заставили меня еще раз задуматься о необходимости писать тесты.</p>

<p>Беря любой старый пример, я понимаю, что можно было написать по-другому. Или, как я недавно начал говорить, &quot;выпендриться&quot; и написать код мечты. Поэтому придется пойти на откровения дальше, взяв не самый хороший код из жизни. </p>

<h3>Юнит тесты поздней осенью</h3>

<p>Утро, поздняя осень, за окном холодно и темно. Вы приходите на работу в часов эдак семь или раньше. Идете на кухню, наливаете себе кофе, медленно и молчаливо пьете, с коллегой, девушкой, думая о том, что надо бы написать к коду тест.</p>

<p>Когда-то и кто-то что-то написал, дальше всем миром это апгрейдили, апгрейдили, а вчера вам пришлось снова что-то туда добавить. При этом вы были уставший, и вам срать было на этот старый код. Да и сейчас, наверное, особенно отношение не изменилось, просто ночью проснулся профессионализм.</p>

<p>Медленно мысли о &quot;надо написать&quot; перерастают в &quot;как написать&quot;. В голове прокручиваются воспоминания о том, а что же делает код. У вас есть некие данные, из которых собирается какая-то сущность. При этом накладывается куча всевозможных &quot;бизнес&quot; ограничений на входную информацию. Что-то вроде сахар не может быть синим, а картошка не может доставлена в ресторан без лука, а помол кофе может быть лишь трех видов, а третий вид поставляется только из Африки. Вроде и валидация, а с другой стороны ничего стандартного не прикрепишь.</p>

<p>В итоге в отведенные два часа из трех вы вчера написали что-то наподобие этому, plain php.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @param Model $model</span>
<span class="sd"> * @throws CustomException</span>
<span class="sd"> */</span>
<span class="k">protected</span> <span class="k">function</span> <span class="nf">checkSomethingRestrictions</span><span class="p">(</span><span class="nx">Model</span> <span class="nv">$model</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$linkedModel</span> <span class="o">=</span> <span class="nv">$model</span><span class="o">-&gt;</span><span class="na">getLinkedModel</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$linkedModel</span> <span class="o">&amp;&amp;</span> <span class="nv">$model</span><span class="o">-&gt;</span><span class="na">hasSomething</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">CustomException</span><span class="p">(</span><span class="s1">&#39;Failed 1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="c1">//code - code - code</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$model</span><span class="o">-&gt;</span><span class="na">isEnabled</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="nv">$something</span> <span class="o">==</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">CustomException</span><span class="p">(</span><span class="s1">&#39;Failed 17&#39;</span><span class="p">,</span> <span class="mi">17</span><span class="p">);</span>
    <span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Проснувшись и преодолев чувство стыда за написанное, вы пишите быстренько тест.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> * @dataProvider checkSomethingRestrictionsProvider</span>
<span class="sd"> *</span>
<span class="sd"> * @param string $modelReference</span>
<span class="sd"> * @param string $exceptionMessage</span>
<span class="sd"> * @param integer|null $exceptionCode</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">checkSomethingRestrictions</span><span class="p">(</span><span class="nv">$modelReference</span><span class="p">,</span> <span class="nv">$exceptionMessage</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$exceptionCode</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$exceptionMessage</span> <span class="o">!==</span> <span class="k">null</span> <span class="o">||</span> <span class="nv">$exceptionCode</span> <span class="o">!==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">setExpectedException</span><span class="p">(</span><span class="s1">&#39;CustomException&#39;</span><span class="p">,</span> <span class="nv">$exceptionMessage</span><span class="p">,</span> <span class="nv">$exceptionCode</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$model</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">referenceRepository</span><span class="o">-&gt;</span><span class="na">getReference</span><span class="p">(</span><span class="nv">$modelReference</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">checkSomethingRestrictions</span><span class="p">(</span><span class="nv">$model</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @return array</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">checkSomethingRestrictionsProvider</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_2&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_3&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_4&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_5&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_6&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_7&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_8&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_9&#39;</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 2&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 3&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_5&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 5&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 4&#39;</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_6&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 6&#39;</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_7&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 7&#39;</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_8&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 8&#39;</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_9&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 9&#39;</span><span class="p">,</span> <span class="mi">9</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_10&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 10&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_11&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 11&#39;</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_12&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 12&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_13&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 13&#39;</span><span class="p">,</span> <span class="mi">13</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_14&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 14&#39;</span><span class="p">,</span> <span class="mi">14</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_15&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 15&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_16&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 16&#39;</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_17&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 17&#39;</span><span class="p">,</span> <span class="mi">17</span><span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Конечно, слово &quot;быстро&quot; не совсем к месту. Создали кучу фикстур для тестирования различных ситуаций и закомитили.</p>

<p>К сожалению, пример попал в 7 или 8 из 10. Имена переменных вымышленные, но размер дата провайдера совершенно реален.</p>

<p>Тут самое время вернуться к статье о <a href="fightmaster.github.io/blog/2013/09/25/code-review.html">код ревью</a>. Система код ревью - это машина будущего, она переносит ваших коллег на полгода вперед, тем самым предоставляя возможность изменить ход событий, избежать тупления над кодом и тестом.</p>

<p><blockquote><p>При написании кода мы стараемся дать сразу понять: что делает метод, что возвращает, что хранит переменная и т.д.. </p></p><p><p>При написании теста мы стараемся показать сразу: что тестируем и какую ситуацию описывают входные данные и т.д..</p><footer><strong>fightmaster</strong> <cite><a href='http://fightmaster.github.io/blog/2013/09/23/unit-tests.html'>fightmaster.github.io/blog/2013/&hellip;</a></cite></footer></blockquote></p>

<p>И правда, а что тестируется в итоге? Вот упадет через полгода код на 15 варианте дата провайдера, и чем мне это поможет? Название какой-то фикстуры (о хорошем тоне именования фикстур в следующей серии) ни о чем нам не скажет. Ну пойдем, откроем ее, а дальше что? А вдруг Петя ее поменял, а за ним Саша. А кто из них был не прав? А вдруг в нашей системе изменились требования, и именно этот тест теперь не должен падать при таких условиях. В обшем ничерта непонятно.</p>

<p>Вторая сторона, это добавить что-то в тест. Мы не знаем куда именно добавлять наш вариант. Все равно куда - не дело. А может наш вариант уже добавлен?</p>

<p>Первое и самое простое, что приходит в голову, оставить просто пояснения, в двух или трех словах выражающие особенность этого кейса.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="sd">/**</span>
<span class="sd"> * @return array</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">checkSomethingRestrictionsProvider</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
        <span class="c1">// model 1, pass</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">),</span>
        <span class="c1">// model 2, pass</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_2&#39;</span><span class="p">),</span>

        <span class="c1">// code</span>
        <span class="c1">// code</span>

        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_7&#39;</span><span class="p">),</span>
        <span class="c1">// model 8, pass</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_8&#39;</span><span class="p">),</span>
        <span class="c1">// model 9, pass</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_9&#39;</span><span class="p">),</span>
        <span class="c1">// model 1, unknown attribute, fail</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 1&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
        <span class="c1">// model 2, unknown name, fail</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 2&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
        <span class="c1">// model 3, no assign balck color, fail</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 3&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span>

        <span class="c1">// code</span>
        <span class="c1">// code</span>

        <span class="c1">// model 16, unknown name, fail</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_16&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 16&#39;</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span>
        <span class="c1">// product WITH color specified, fail</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;invalid_model_17&#39;</span><span class="p">,</span> <span class="s1">&#39;Failed 17&#39;</span><span class="p">,</span> <span class="mi">17</span><span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Теперь мы хотя бы знаем, что хотели сказать авторы. Поддерживать тест теперь намного проще, порог вхождения в код сокращен.</p>

<h3>Бесконечность параметров</h3>

<p>В первых строках этой главы я завис на несколько минут. Все дело в том, что я очень редко вижу методы с большим набором входных параметров. Все знают, что это имеет плачевные последствия, и никто так не пишет нынче. Но почему-то все забывают эти правила при написании тестов. Мне кажется это феномен. Я наблюдал это в других проектах. Да, и где-то в глубине души существует искра надежды, что вы делали также.</p>

<p>Чаще всего в тесте нам нужно сконфигурировать определенную ситуацию. В предыдущей главе это достигалось с помощью фикстур. Часто используются моки или даже сами объекты, последнее конечно неправильно. Но в данных примерах именно они и будут. Так как работа с мок объектами - это целое искуство, и я не хочу все смешивать.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> * @backupGlobals enabled</span>
<span class="sd"> * @dataProvider getGlobalsProvider</span>
<span class="sd"> * </span>
<span class="sd"> * @param boolean $a</span>
<span class="sd"> * @param boolean $b</span>
<span class="sd"> * @param array $expectedResult</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">getGlobals</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">,</span> <span class="nv">$expectedResult</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$a</span><span class="p">;</span>
    <span class="nv">$GLOBALS</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$b</span><span class="p">;</span>
    <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">getGlobals</span><span class="p">();</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertSame</span><span class="p">(</span><span class="nv">$expectedResult</span><span class="p">,</span> <span class="nv">$result</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @return array</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">getGlobalsProvider</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
        <span class="k">array</span><span class="p">(</span><span class="k">true</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;a_value&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span> <span class="s1">&#39;b_value&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">)),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">true</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;a_value&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span> <span class="s1">&#39;b_value&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">)),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;a_value&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span> <span class="s1">&#39;b_value&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">)),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">false</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;a_value&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">,</span> <span class="s1">&#39;b_value&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">)),</span>
    <span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Такой вот незамысловатый пример. Через некоторое время использование дата провайдера таким образом превращается в привычку. И в результате...</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> * @dataProvider findBySearchMappingProvider</span>
<span class="sd"> *</span>
<span class="sd"> * @param string|null $color</span>
<span class="sd"> * @param string|null $size</span>
<span class="sd"> * @param integer|null $width</span>
<span class="sd"> * @param integer|null $length</span>
<span class="sd"> * @param integer|null $height</span>
<span class="sd"> * @param boolean|null $enabled</span>
<span class="sd"> * @param array $expectedReferences</span>
<span class="sd"> * @param integer $expectedResultCount</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findBySearchMapping</span><span class="p">(</span><span class="nv">$color</span><span class="p">,</span> <span class="nv">$size</span><span class="p">,</span> <span class="nv">$width</span><span class="p">,</span> <span class="nv">$length</span><span class="p">,</span> <span class="nv">$height</span><span class="p">,</span> <span class="nv">$enabled</span><span class="p">,</span> <span class="nv">$expectedReferences</span><span class="p">,</span> <span class="nv">$expectedResultCount</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$expectedResults</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$expectedReferences</span> <span class="k">as</span> <span class="nv">$referenceName</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$expectedResults</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">referenceRepository</span><span class="o">-&gt;</span><span class="na">getReference</span><span class="p">(</span><span class="nv">$referenceName</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$searchMapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SearchMapping</span><span class="p">();</span>
    <span class="nv">$searchMapping</span><span class="o">-&gt;</span><span class="na">setColor</span><span class="p">(</span><span class="nv">$color</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setSize</span><span class="p">(</span><span class="nv">$size</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setWidth</span><span class="p">(</span><span class="nv">$width</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setLength</span><span class="p">(</span><span class="nv">$length</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setHeight</span><span class="p">(</span><span class="nv">$height</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setEnabled</span><span class="p">(</span><span class="nv">$enabled</span><span class="p">);</span>

    <span class="nv">$results</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">findBySearchMapping</span><span class="p">(</span><span class="nv">$searchMapping</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertCount</span><span class="p">(</span><span class="nv">$expectedResultCount</span><span class="p">,</span> <span class="nv">$results</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertContainsOnlyInstancesOf</span><span class="p">(</span><span class="s1">&#39;SomeInterface&#39;</span><span class="p">,</span> <span class="nv">$results</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedResults</span><span class="p">,</span> <span class="nv">$results</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @return array</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findBySearchMappingProvider</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_5&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span> <span class="mi">6</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_2&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;NOTEXIST&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="mi">0</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="s1">&#39;XL&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span> <span class="mi">5</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_5&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="s1">&#39;XL&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="mi">0</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="s1">&#39;XL&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="mi">0</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_5&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span> <span class="mi">5</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_2&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_3&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="mi">0</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span> <span class="mi">2</span><span class="p">),</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Когда это видишь первый раз на ревью, сначала прощаешь или не придаешь значение. Но команда - это лавина, особенно, если задание в релизе способствует появлению таких провайдеров. Иногда количество параметров достигало до 15. И в какой-то момент понимаешь, что надо брать ситуацию под контроль. Это осознание усиливается, когда в одном PR (Pull Request) несколько таких примеров. Что же делать?</p>

<p>Естественно, сначала оставляем комментарии, что-то вроде такого.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @return array</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findBySearchMappingProvider</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
        <span class="c1">//$color, $size, $width, $length, $height, $enabled, $expectedReferences, $expectedResultCount</span>
        <span class="c1">//find all models</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_5&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span> <span class="mi">6</span><span class="p">),</span>
        <span class="c1">//find models by the color</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>
        <span class="c1">//find models by the color</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;red&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_2&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>
        <span class="c1">//trying find models by the non-existent color</span>
        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;NOTEXIST&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="mi">0</span><span class="p">),</span>
        <span class="c1">//find models by the size</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="s1">&#39;XL&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span> <span class="mi">5</span><span class="p">),</span>
        <span class="c1">//find models by the size</span>
        <span class="k">array</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="s1">&#39;M&#39;</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_5&#39;</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span>

        <span class="c1">// code</span>
        <span class="c1">// code</span>
    <span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Так как это минимум умственных и временных затрат для достижения компромисса между программистом и владельцем продукта.</p>

<h3>Не комментируйте плохой код — перепишете его.</h3>

<p>Спустя время мы нашли несколько решений. До сих пор у меня нет объяснения, почему они сразу не всплыли. Вспомним цитату выше. Нам нужно всего лишь показать, что мы хотим протестировать. А многочисленные <code>null</code> лишь говорят о том, что эти значения нас не интересуют для этого теста.</p>

<p>Воспользуемся советом дядюшки Боба.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @return array</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findBySearchMappingProvider</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
        <span class="c1">// find all models</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(),</span> 
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_5&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span>
             <span class="mi">6</span>
         <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;black&#39;</span><span class="p">),</span> 
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">),</span> 
            <span class="mi">1</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;red&#39;</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_2&#39;</span><span class="p">),</span>
            <span class="mi">1</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;NOTEXIST&#39;</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(),</span>
            <span class="mi">0</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;size&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;XL&#39;</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span>
            <span class="mi">5</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;size&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;M&#39;</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_5&#39;</span><span class="p">),</span>
            <span class="mi">1</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;XL&#39;</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">),</span>
            <span class="mi">1</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;M&#39;</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(),</span>
            <span class="mi">0</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;XL&#39;</span><span class="p">,</span> <span class="s1">&#39;width&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;length&#39;</span> <span class="o">=&gt;</span><span class="p">,</span> <span class="s1">&#39;height&#39;</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(),</span>
            <span class="mi">0</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;enabled&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_5&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span>
            <span class="mi">5</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;enabled&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_2&#39;</span><span class="p">),</span>
            <span class="mi">1</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;length&#39;</span> <span class="o">=&gt;</span> <span class="mi">5</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_3&#39;</span><span class="p">),</span>
            <span class="mi">1</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;length&#39;</span> <span class="o">=&gt;</span> <span class="mi">1000</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(),</span>
            <span class="mi">0</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;height&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">),</span>
            <span class="mi">2</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;height&#39;</span> <span class="o">=&gt;</span> <span class="mi">100</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(),</span>
            <span class="mi">0</span>
        <span class="p">)</span>
    <span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Вуаля, ассоциативные массивы спасают этот мир. Ключ массива выступает в роли комментария, и необходимость онного чаще всего излишне теперь (хотя НЕ всегда). Осталось теперь поправить сам код теста.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> * @dataProvider findBySearchMappingProvider</span>
<span class="sd"> *</span>
<span class="sd"> * @param array $dataMapping</span>
<span class="sd"> * @param array $expectedReferences</span>
<span class="sd"> * @param integer $expectedResultCount</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findBySearchMapping</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">,</span> <span class="nv">$expectedReferences</span><span class="p">,</span> <span class="nv">$expectedResultCount</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$expectedResults</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$expectedReferences</span> <span class="k">as</span> <span class="nv">$referenceName</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$expectedResults</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">referenceRepository</span><span class="o">-&gt;</span><span class="na">getReference</span><span class="p">(</span><span class="nv">$referenceName</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$searchMapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SearchMapping</span><span class="p">();</span>
    <span class="nv">$searchMapping</span><span class="o">-&gt;</span><span class="na">setColor</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setSize</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setWidth</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;width&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;width&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setLength</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;length&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;length&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setHeight</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;heigth&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;height&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setEnabled</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;enabled&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;enabled&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">);</span>

    <span class="nv">$results</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">findBySearchMapping</span><span class="p">(</span><span class="nv">$searchMapping</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertCount</span><span class="p">(</span><span class="nv">$expectedResultCount</span><span class="p">,</span> <span class="nv">$results</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertContainsOnlyInstancesOf</span><span class="p">(</span><span class="s1">&#39;SomeInterface&#39;</span><span class="p">,</span> <span class="nv">$results</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedResults</span><span class="p">,</span> <span class="nv">$results</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<h3>Рефакторинг</h3>

<p>Но негоже оставлять в таком виде тест, вдруг кто-то решит взять на заметку этот совет. </p>

<p>Во-первых, блок, получающий ожидаемые объекты, един как минимум для этого тест кейса. Во-вторых, тоже самое можно сказать про создание конфигурируемого объекта. При этом чаще всего это мок объект, и он используется в других тестах. В-третьих, я ненавижу параметр $expectedCounts, тем более когда есть набор ожидаемых объектов.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @test</span>
<span class="sd"> * @dataProvider findBySearchMappingProvider</span>
<span class="sd"> *</span>
<span class="sd"> * @param array $dataMapping</span>
<span class="sd"> * @param array $expectedReferences</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findBySearchMapping</span><span class="p">(</span><span class="k">array</span> <span class="nv">$mappingData</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$expectedReferences</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$expectedResults</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getSomethingByReferences</span><span class="p">(</span><span class="nv">$expectedReferences</span><span class="p">);</span>
    <span class="nv">$searchMapping</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getSearchMapping</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">);</span>

    <span class="nv">$results</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uut</span><span class="o">-&gt;</span><span class="na">findBySearchMapping</span><span class="p">(</span><span class="nv">$searchMapping</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertCount</span><span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$expectedResults</span><span class="p">),</span> <span class="nv">$results</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertContainsOnlyInstancesOf</span><span class="p">(</span><span class="s1">&#39;SomeInterface&#39;</span><span class="p">,</span> <span class="nv">$results</span><span class="p">);</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertEquals</span><span class="p">(</span><span class="nv">$expectedResults</span><span class="p">,</span> <span class="nv">$results</span><span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @return array</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">findBySearchMappingProvider</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
        <span class="c1">// find all models</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(),</span> 
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_2&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_5&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">)</span>
         <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;black&#39;</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">)</span>
        <span class="p">),</span>

        <span class="c1">//code</span>

        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="s1">&#39;size&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;XL&#39;</span><span class="p">,</span> <span class="s1">&#39;width&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;length&#39;</span> <span class="o">=&gt;</span><span class="p">,</span> <span class="s1">&#39;height&#39;</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">),</span>
            <span class="k">array</span><span class="p">()</span>
        <span class="p">),</span>
        <span class="k">array</span><span class="p">(</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;enabled&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">),</span>
            <span class="k">array</span><span class="p">(</span><span class="s1">&#39;model_1&#39;</span><span class="p">,</span> <span class="s1">&#39;model_3&#39;</span><span class="p">,</span> <span class="s1">&#39;model_4&#39;</span><span class="p">,</span> <span class="s1">&#39;model_5&#39;</span><span class="p">,</span> <span class="s1">&#39;model_6&#39;</span><span class="p">)</span>
        <span class="p">),</span>

        <span class="c1">//code</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @param array $references</span>
<span class="sd"> * @return SomeInterface[]</span>
<span class="sd"> */</span>
<span class="k">private</span> <span class="k">function</span> <span class="nf">getSomethingByReferences</span><span class="p">(</span><span class="k">array</span> <span class="nv">$references</span><span class="p">)</span>
<span class="p">{</span>

    <span class="nv">$models</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$references</span> <span class="k">as</span> <span class="nv">$referenceName</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$models</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">referenceRepository</span><span class="o">-&gt;</span><span class="na">getReference</span><span class="p">(</span><span class="nv">$referenceName</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">$models</span><span class="p">;</span>
<span class="p">}</span>

<span class="sd">/**</span>
<span class="sd"> * @param array $mappingData</span>
<span class="sd"> * @return SearchMapping</span>
<span class="sd"> */</span>
<span class="k">private</span> <span class="k">function</span> <span class="nf">getSearchMapping</span><span class="p">(</span><span class="k">array</span> <span class="nv">$mappingData</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$searchMapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SearchMapping</span><span class="p">();</span>
    <span class="nv">$searchMapping</span><span class="o">-&gt;</span><span class="na">setColor</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setSize</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setWidth</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;width&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;width&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setLength</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;length&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;length&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setHeight</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;heigth&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;height&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">)</span>
        <span class="o">-&gt;</span><span class="na">setEnabled</span><span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;enabled&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$mappingData</span><span class="p">[</span><span class="s1">&#39;enabled&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<h3>Заключение</h3>

<p>Последний мой PR содержал data provider для сложного поиска c около 70 вариантами. И знаете, он выглядит &quot;удобоваримо&quot;. Я придерживаюсь такого правила, если, прокручивая провайдер колесиком мышки, вы все прекрасно понимаете - значит проверка на качество пройдена.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Задания к лекции "Работа со строками"]]></title>
    <link href="http://fightmaster.github.io//blog/2013/02/24/four-lecture-working-with-strings.html"/>
    <updated>2013-02-24T00:50:00+04:00</updated>
    <id>http://fightmaster.github.io//blog/2013/02/24/four-lecture-working-with-strings</id>
    <content type="html"><![CDATA[<p>С небольшим опозданием выложены <a href="/php-lectures/05-working-with-strings.html">задания</a> к четвертой лекции.
Задача про палиндромы имеет подводные камни, будьте внимательны.</p>
]]></content>
  </entry>
  
</feed>
