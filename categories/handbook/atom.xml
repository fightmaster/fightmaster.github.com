<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: handbook | Fightmaster's blog]]></title>
  <link href="http://fightmaster.github.io//categories/handbook/atom.xml" rel="self"/>
  <link href="http://fightmaster.github.io//"/>
  <updated>2017-01-08T01:05:07+04:00</updated>
  <id>http://fightmaster.github.io//</id>
  <author>
    <name><![CDATA[{"name"=>"fightmaster", "url"=>"https://twitter.com/old_fightmaster"}]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Код ревью]]></title>
    <link href="http://fightmaster.github.io//blog/2013/09/25/code-review.html"/>
    <updated>2013-09-25T23:50:00+04:00</updated>
    <id>http://fightmaster.github.io//blog/2013/09/25/code-review</id>
    <content type="html"><![CDATA[<p>Решил разбавить тематику и написать что-то вроде справочника, на который всегда можно дать ссылку и обновить. Некоторые вещи лучше не внедрять без объяснений. Нельзя сказать, завтра вы будете применять agile, парное программирование, tdd, так как это делают все крутые ребята.</p>

<!-- more -->

<p>Я не могу работать без код ревью, также как и писать код без тестов. Если из описания вакансии следует, что ребята не пишут тестов, не имеют практики проведения код ревью, мучаются с svn и так далее, я моментально закрываю страницу.</p>

<p>Причин такого &quot;неадекватного&quot; поведения несколько, попробую хотя бы половину вспомнить и перечислить.</p>

<h3>Саморазвитие</h3>

<p>Невозможно саморазвитие в индивидуальном творчестве. Теорию черпать можно от соседа или книжек. Практика хорошо улучшается, когда тебя критикуют другие, и когда ты смотришь чужой код. Так исчезают собственные помарки, и ты невольно перенимаешь что-то лучшее от соседа. Иначе ваш профессионализм превращается в самолюбование. Никто и никогда не скажет и не спросит: &quot;что за гавно? что за ерунда написана? какой баран это написал?&quot;. Да и если вы, глядя случайно в чей-то код, такое кричали, это не означает, что от вас мусора меньше, неправда ли?</p>

<h3>Знание проекта</h3>

<p>Знание проекта, того что в нем происходит, не проходит мимо тебя. Ты знаешь, что делает или сделал сосед. Иначе, можно дать просто права на push всем участникам, и каждый будет писать свой проект. Если вам не повезет, и каждый из участников проекта делает индивидуально большой кусок кода от 0 до 100 процентов, то через полгода вы не сможете вернуть свои глаза на место при необходимости внести даже небольшие изменения. Это равносильно тому, что программиста с улицы взять и посадить писать код. Будут только вздохи, охи, ахи, периодическая ругань. Одни эмоции и переживания, никакого кодинга. Возможна и другая ситуация, что вы железный дровосек без сердца, и можете только рубить лес от точки А до точки Б, не задумываясь о том, зачем этот лес посадили, и почему вы вырубаете именно эту часть леса.</p>

<h3>Мы одна команда, одной крови</h3>

<p>Рано или поздно возникнет ситуация, когда вы с соседом сделаете одну и ту же вещь по-разному. Сложно сразу что-то такое вспомнить. Хотя бы следующие простейшие примеры. </p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$string1</span> <span class="o">=</span> <span class="s1">&#39;$a = &#39;</span> <span class="o">.</span> <span class="nv">$a</span> <span class="o">.</span> <span class="s1">&#39;, $b = &#39;</span> <span class="o">.</span> <span class="nv">$b</span> <span class="o">.</span> <span class="s1">&#39;, $a + $b = &#39;</span> <span class="o">.</span> <span class="nv">$c</span><span class="p">;</span>
<span class="c1">//or</span>
<span class="nv">$string1</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s1">&#39;$a = %d, $b = %d, $a + $b = %d&#39;</span><span class="p">,</span> <span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">,</span> <span class="nv">$c</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div><div class="highlight"><pre><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$array</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nv">$array</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1"># code...</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$countElements</span> <span class="o">=</span> <span class="nv">$count</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
    <span class="c1"># code...</span>
<span class="p">}</span>

<span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nv">$countElements</span> <span class="o">=</span> <span class="nv">$count</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$countElements</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1"># code...</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</code></pre></div>
<p>Со временем даже от таких мелочей проект превращается в помойку. Сначала мы получаем два стиля в разных кусках кода, постепенно они перемешиваются, и ...</p>

<p>Со сложными примерами, когда какая-то логика приложения делается по-разному, результат еще более близок к могиле. Вы либо получаете дублирование кода, либо первый результат в более плачевном виде. Например, кто-то бросает эксепшины, кто-то возвращает true/false, кто-то в строковом виде сообщение об ошибке, четвертый создает методы &quot;черные дыры&quot;.</p>

<p>При код ревью команда самоорганизуется, выбирая те или иные правила, соглашения, best practice, и придерживается их. В результате сам код проекта - единое целое. Его можно теперь разделить по времени: &quot;что мы вот так писали очень давно, были молоыде и не опытные, а вот так еще раньше&quot;. Но невозможно будет сказать, что это Вася гавнокодит так, а это вот Петькина козюлька. Никаких личностей.</p>

<h3>Звезда по имени Я</h3>

<p>Проходит звездность, приходит профессионализм. Это чаще всего заметно на &quot;новичках&quot;. Всю жизнь ты писал так и никак иначе, а тут тебе на ревью: &quot;что за ерунда?&quot;. Главное правильно отнестись к этому. Через это все прошли, никто не родился архитектором, никто не получил опыт при рождении.</p>

<h3>Банальности</h3>

<p>В заключении стоит привести какие-то очевидные плюсы:</p>

<ul>
<li>опечатки, от них никто не застрахован;</li>
<li>плохое настроение/погода - часто причина детских ошибок даже у опытных мастеров;</li>
<li>большой таск - вообще это язва, это главное скопление дурных ошибок, автора уже тошнит от кода, глаза слепаются и хочется скорей-скорей и что-то новое.</li>
</ul>

<h3>Парное программирование</h3>

<p>В самой последний момент пришло в голову следующее определение. Код ревью - это парное программирование офф-лайн, а я к этой практике совсем неравнодушен. Большинство идей, от простых до архитектурных, приходило мне в голову, только когда я смотрел на чужой код. Свежий взгляд он всегда ценее, чем уставший. Тем более для тебя все написали, а если еще и код понятный, то посидеть и подумать одно удовольствие.</p>

<p>Очень часто, вы что-то прочитаете, услышите, а применить и самому написать некогда. Большая вероятность, что сосед уже это пишет и вам нужно только просто глянуть ;).</p>

<h3>Полезные ссылки</h3>

<p>Вообще, в сети много статей разных на эту тему. Но одна ссылка мне очень понравилась. Там наверняка есть все, что я забыл рассказать, в тезисах.</p>

<ul>
<li><a href="http://www.mindmeister.com/ru/234594602/code-review-2">code review</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
