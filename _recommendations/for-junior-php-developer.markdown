---
layout: page
title: "Рекомендации по php для младшего php-разработчика"
date: 2014-09-04 21:00
comments: true
categories: [php, opensoft, recommendations]
tags: [php, opensoft, recommendations]
---
### О подборке
Ниже изложенный материал может помочь начать идти в ногу со временем в php мире.
Данная подборка создана вначале 2014 года и раздавалась всем желающим после собеседований.

### Ссылки
Существует много аналогичных сайтов [http://www.phptherightway.com/](http://www.phptherightway.com/), где изложены различные полезные ссылки.
Если вас интересует mysql, javascript - google вам поможет.

### Первые шаги

**Code style** у каждого фреймворка или команды может быть свой, но так или иначе есть базовая основа: [PSR](https://github.com/php-fig/fig-standards/tree/master/accepted).
 Это как алфавит, его нужно обязательно знать, до самых мелочей. Тогда вам не будет стыдно что-то закомитить в тот же **open source**, или переходить на другую работу, или в другой проект.

Современная разработка направлена на гибкость, на получение результата с хорошим качеством.
Совокупность Agile и code review вынуждает обращать внимание на децентрализованные системы контроля версий, например git.

Наверное, “вечная” статья про разработку [a-successful-git-branching-model](http://nvie.com/posts/a-successful-git-branching-model/) ([перевод](http://habrahabr.ru/post/106912/)).

Из полезных титуриалов можно выделить:

 * [try.github.io](http://try.github.io/levels/1/challenges/1)
 * [git-scm.com](http://git-scm.com/docs)
 * [git-cheatsheet](http://ndpsoftware.com/git-cheatsheet.html)
 * [salesforce_git_developer_cheatsheet.pdf](https://na1.salesforce.com/help/pdfs/en/salesforce_git_developer_cheatsheet.pdf)
 * [http://gitref.org/](http://gitref.org/)
 * [squashing-commits](http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html)

Основные темы: stash, rebase, merge, различия между rebase и merge, cherry-pick, checkout, squash, alias.

Изначально, когда разрабатывается продукт, встает выбор подключения зависимостей.
В наше время уже существуют менеджеры зависимостей: [composer](https://getcomposer.org/), [bower](http://bower.io/).
Если мы посмотрим на все современные версии библиотек и фреймворков, мы обязательно встретим там конфиги для этих менеджеров.

### Базовый набор книжек.
У меня есть традиционный набор книжек, с которых я рекомендую начать читать техническую литературу.
По-моему мнению, их обязан прочитать каждый, хотя бы раз. Кто-то найдет в них что-то новое и перевернет свое мировоззрение,
кто-то утвердит свое "я" и полученный опыт, найдя абсолютную поддержку от авторов.

 * Рефакторинг. Улучшение существующего кода. Мартин Фаулер. (Refactoring: Improving the Design of Existing Code)
Хороший стартап по данной теме. http://refactoring.guru/
 * Чистый код: создание, анализ и рефакторинг. Роберт Мартин или просто uncle Bob. (Clean Code: A Handbook of Agile Software Craftsmanship)

Не стоит браться за банду четерех (Design Patterns: Elements of Reusable Object-Oriented Software/Приёмы объектно-ориентированного проектирования. Паттерны проектирования) на первых своих шагах.
Вы можете выучить все паттерны в теории, но без знания и опыта проведения рефакторинга вы никогда не примените их на практике.
Если все же решите читать, уделяйте при первом прочтении только азам (**название**, **назначение**, **мотивация**, **применение**) и не читайте и не забивайте голову реализацией.
Сначала надо научится сразу сопоставлять в своей голове задачу поставленную перед вами, к каким проблемам она относится и с помощью чего ее можно решить более изящно и полезно для проекта.
Хорошая альтернатива банде четырех для начинающих это серия head first (паттерны проектирования).

Будьте современны, следите за тем, что происходит в современном мире.
Очень неплохой [дайждест](http://habrahabr.ru/users/pronskiy/topics/) новостей ведет [@pronskiy](https://twitter.com/pronskiy), с периодичностью раз в две недели.
Я не буду давать ссылки на блоги разработчиков, которые предпочитаю лично я, вы сами найдете своих авторов.

### Немного рекламы
Почти все начинающие программисты имеют одни те же пробелы в своих знаниях. Кто-то ищет сам что-то, кто-то просто плывет по своему течению.

Некоторые базовые вещи я с какой-то периодичностью стараюсь описывать в своем блоге.

Во-первых, тут есть наброски [лекций](http://fightmaster.github.io/php-lectures/00-contents.html) про PHP.
Почти все темы содержат какие-то тезисы-оглавления, теоретические и практические задания.
**Особое внимание**, хочется обратить именно на 9 пункт, про **ООП**.
Где в принципе изложены полноценные лекции, я очень надеюсь, что они прояснят много информации.

Если у вас проблемы с базовыми знаниями php, рекомендую читать официальную документацию к языку, опираясь на содержание лекций и заданий.

Во-вторых, я неравнодушен к тестированию. И в блоге можно найти несколько статей на эту тему.
Может они дадут вам некий толчок к познанию тех же **unit test**, и покажут вам, что можно жить без **дебага**, **print_r** и **die**.

### Пожелания
Попробуйте начать с первых шагов и не бойтесь применять новые знания на практике. Какие-то попытки будут удачные, какие-то нет.

Вы всегда можете связаться с [opensoft](http://opensoftdev.ru/) и договориться о встрече, где вы сможете обсудить любые вопросы, получить совет для дальнейшего развития.