---
layout: post
title: "Unit Tests. О фикстурах. Часть 1"
date: 2013-10-12 01:00
comments: true
categories: [unit tests,fixtures,php,doctrine2]
---
{% What is a fixture? http://phpunit.de/manual/3.7/en/database.htm %}
A fixture describes the initial state your application and database are in when you execute a test.
{% endblockquote %}

Но мне ближе эмоции: "это куча продублированных данных", "самое популярное место для copy/paste", "Ты что делал? Я целый день писал фикстуры", "Какой ***** создал невалидные фикстуры, я два часа искал у себя ошибку". Сегодня мы как минимум попробуем определить круг проблемных мест, затем рассмотреть кто что предлагает, и добраться до нашего решения.
<!-- more -->
### Вкратце о независимости тестов

Я буду признателен, если новички все же прочтут ссылку на официальную документацию :) [phpunit.de](http://phpunit.de/manual/3.7/en/fixtures.html). Вообще, каждый тест должен быть независимым от другого. По правде говоря, программист в любом случае к этому правилу придет. Рано или поздно возникнет ситуация, когда в результате работы одного теста, вы не сможете запустить второй тест. Например, мы удалили пользователя Васю, а затем решили проверить, сколько всего у нас пользователей в системе. Хитрый трюк: "А не поменять ли нам тесты местами?", складывает свои полномочия, когда вы теряете 5 часов на понимание, почему же у вас тест не проходит. Этой статьи не было, если все приложения состояли из фразы: "Hello, Vasya". Мы бы тогда создали единую фикстуру с пользователем Вася и всегда ее подключали. Но жизнь не простая штука, в проекте может быть светильник, который как назло нам, днем выключен, а ночью включен. И как же быть тогда? Вот и начинаем создавать для каждого теста свои светильники с каким-то определенным состоянием. Создаем, создаем и приходим к эмоциям, описанным выше.


### Эпоха Zend 1 и xml

В 2010 году я впервые столкнулся с unit test'ами. Тогда был в "моде" Zend 1. Для большинства этот фреймворк запомнился по формам и декораторам. Но я с болью вспоминаю, как мы внедряли тесты в свой проект. У нас не было никакой ORM, я даже не знаю, была ли тогда хотя бы doctrine 1. Я точно помню, что "для моего окружения" не было никаких стандартных решений для создания фикстур. После долгих мучений, у нас для каждого теста, работающего с базой, были большие xml, содержащие специфичские данные. Напишу по памяти пример.

```xml
<users>
    <user>
        <id>1</id>
        <name>Vasya</name>
        <email>vasya@example.com</email>
    </user>
    <user>
        <id>2</id>
        <name>Maria</name>
        <email>maria@example.com</email>
    </user>
</users>
<groups>
    <group>
        <name>Admin</name>
    </group>
    <group>
        <name>Moderator</name>
    </group>
</groups>
```

И так сотни и сотни строк.

### Текущие будни в пхп.

Я потратил некоторое время для исследования, а что же предлагает в 2013 году php сообщество для быстрого создания фикстур.

 * [DbUnit](http://phpunit.de/manual/3.7/en/database.htm) - нельзя не упомянуть, наверное это азы, с которых многие начинали. Предоставляет большие возможности для инжектирования данных различных форматов в базу данных. Еще там очень хорошее введение.
 * [doctrine/data-fixtures](https://github.com/doctrine/data-fixtures) - я думаю популярен среди тех, кто пользуется doctrine orm. 
 * [Alice and Bob](http://nelm.io/blog/2012/10/generating-fixtures-with-alice/) - на первый взгляд очень интересная задумка, но у меня есть к ней ряд претензий. В любом случае, пройти мимо этого проекта совсем негоже.
 * [Faker](https://github.com/fzaninotto/Faker) - помогает вам сочинить ваши "бла-бла-бла" для тестов.

И как-то все, если кто-то из читателей дополнит список чем-то достойным - велкам.

### Копать и еще раз копать

{% Какой-то бородатый анекдот %}
Командир командует солдатам: - Так!.. Копать здесь, здесь и здесь! А я пока схожу, узнаю, где надо.
{% endblockquote %}

В первой [статье]() я обмолвился, что пришло осознание наличие проблем с созданием фикстур. Сейчас ощущаю себя вроде того командира. На данный момент наш проект накопал более 500 фикстур, в которых инстанцируется и заполняется более 4000 объектов. Теперь я пишу эту статью и говорю этим самым, что у нас тут стоял экскаватор рядом, но мы были немного слепы.

Вот выше приведены в пример 4 лопаты, но это лишь инструментарий. В принципе, они лишь отличаются способом создания фикстуры. А ```DbUnit``` с  ```Alice and Bob``` ничем не лучше нашего решения в 2010 году. Мы используем ```doctrine/data-fxitrures```. Вот пример нашей фикстуры и теста.






Но как бы вы не создавали фикстуры, никакая библиотека не решит проблему светильника. Она лишь определит ваши предпочтения, каких 500 файлов вы создадите: php, yml, xml, sql, csv.

### Немного теории

В принципе проблема-то лежит на поверхности, а значит ее уже решали. Если смотреть в сторону паттернов проектирования, два самых популярных решения: ObjectMother и Builder. Я не хочу пересказывать замечательные труды и статьи, вот понравившийся мне список. Решения конкурируют между собой, у каждого свои минусы и плюсы.





Я понял самый большой недостаток - теория заточена под понятие фикстур - как начальное состояние приложени, но не базы данных. 







### Рефакторинг теста

Я уже начал набирать текст статьи, как вдруг осознал, что большинство решает другую проблему все еще.

Давайте вспомним, что было в статье про [data provider](http://fightmaster.github.io/blog/2013/10/05/unit-tests-data-provider-without-a-headache.html). У нас были тесты, в которых было зашито куча информации. В итоге мы большинство инициализаций вынесли в методы, а сами провайдеры стали очень простыми.

Так вот большинство статей направлено на решение такой же задачи, и продолжает рефакторинг. Я же хочу сразу разделить 